//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SecureAuthWebServiceDemoTests.MembershipService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MembershipUserModel", Namespace="http://schemas.datacontract.org/2004/07/SecureAuth.ServiceModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SecureAuthWebServiceDemoTests.MembershipService.MembershipCreateStatus))]
    public partial class MembershipUserModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastActivityDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastLockoutDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastLoginDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastPasswordChangedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordQuestionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ProviderUserKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsApproved {
            get {
                return this.IsApprovedField;
            }
            set {
                if ((this.IsApprovedField.Equals(value) != true)) {
                    this.IsApprovedField = value;
                    this.RaisePropertyChanged("IsApproved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLockedOut {
            get {
                return this.IsLockedOutField;
            }
            set {
                if ((this.IsLockedOutField.Equals(value) != true)) {
                    this.IsLockedOutField = value;
                    this.RaisePropertyChanged("IsLockedOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnline {
            get {
                return this.IsOnlineField;
            }
            set {
                if ((this.IsOnlineField.Equals(value) != true)) {
                    this.IsOnlineField = value;
                    this.RaisePropertyChanged("IsOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastActivityDate {
            get {
                return this.LastActivityDateField;
            }
            set {
                if ((this.LastActivityDateField.Equals(value) != true)) {
                    this.LastActivityDateField = value;
                    this.RaisePropertyChanged("LastActivityDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastLockoutDate {
            get {
                return this.LastLockoutDateField;
            }
            set {
                if ((this.LastLockoutDateField.Equals(value) != true)) {
                    this.LastLockoutDateField = value;
                    this.RaisePropertyChanged("LastLockoutDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastLoginDate {
            get {
                return this.LastLoginDateField;
            }
            set {
                if ((this.LastLoginDateField.Equals(value) != true)) {
                    this.LastLoginDateField = value;
                    this.RaisePropertyChanged("LastLoginDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastPasswordChangedDate {
            get {
                return this.LastPasswordChangedDateField;
            }
            set {
                if ((this.LastPasswordChangedDateField.Equals(value) != true)) {
                    this.LastPasswordChangedDateField = value;
                    this.RaisePropertyChanged("LastPasswordChangedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordQuestion {
            get {
                return this.PasswordQuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordQuestionField, value) != true)) {
                    this.PasswordQuestionField = value;
                    this.RaisePropertyChanged("PasswordQuestion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderName {
            get {
                return this.ProviderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderNameField, value) != true)) {
                    this.ProviderNameField = value;
                    this.RaisePropertyChanged("ProviderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object ProviderUserKey {
            get {
                return this.ProviderUserKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderUserKeyField, value) != true)) {
                    this.ProviderUserKeyField = value;
                    this.RaisePropertyChanged("ProviderUserKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MembershipCreateStatus", Namespace="http://schemas.datacontract.org/2004/07/System.Web.Security")]
    public enum MembershipCreateStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUserName = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidPassword = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidQuestion = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidAnswer = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidEmail = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateUserName = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateEmail = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserRejected = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidProviderUserKey = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DuplicateProviderUserKey = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProviderError = 11,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MembershipService.IMembership")]
    public interface IMembership {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/CreateUser", ReplyAction="http://tempuri.org/IMembership/CreateUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SecureAuthWebServiceDemoTests.MembershipService.MembershipUserModel))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SecureAuthWebServiceDemoTests.MembershipService.MembershipCreateStatus))]
        SecureAuthWebServiceDemoTests.MembershipService.CreateUserResponse CreateUser(SecureAuthWebServiceDemoTests.MembershipService.CreateUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/CreateUser", ReplyAction="http://tempuri.org/IMembership/CreateUserResponse")]
        System.Threading.Tasks.Task<SecureAuthWebServiceDemoTests.MembershipService.CreateUserResponse> CreateUserAsync(SecureAuthWebServiceDemoTests.MembershipService.CreateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/GetUser", ReplyAction="http://tempuri.org/IMembership/GetUserResponse")]
        SecureAuthWebServiceDemoTests.MembershipService.MembershipUserModel GetUser(string adminUserName, string adminPassword, string userId, bool isOnline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/GetUser", ReplyAction="http://tempuri.org/IMembership/GetUserResponse")]
        System.Threading.Tasks.Task<SecureAuthWebServiceDemoTests.MembershipService.MembershipUserModel> GetUserAsync(string adminUserName, string adminPassword, string userId, bool isOnline);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/ValidateUser", ReplyAction="http://tempuri.org/IMembership/ValidateUserResponse")]
        bool ValidateUser(string adminUserName, string adminPassword, string userId, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/ValidateUser", ReplyAction="http://tempuri.org/IMembership/ValidateUserResponse")]
        System.Threading.Tasks.Task<bool> ValidateUserAsync(string adminUserName, string adminPassword, string userId, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/ChangePassword", ReplyAction="http://tempuri.org/IMembership/ChangePasswordResponse")]
        bool ChangePassword(string adminUserName, string adminPassword, string userId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/ChangePassword", ReplyAction="http://tempuri.org/IMembership/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string adminUserName, string adminPassword, string userId, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/ResetPassword", ReplyAction="http://tempuri.org/IMembership/ResetPasswordResponse")]
        string ResetPassword(string adminUserName, string adminPassword, string userId, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/ResetPassword", ReplyAction="http://tempuri.org/IMembership/ResetPasswordResponse")]
        System.Threading.Tasks.Task<string> ResetPasswordAsync(string adminUserName, string adminPassword, string userId, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/Echo", ReplyAction="http://tempuri.org/IMembership/EchoResponse")]
        string Echo(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/Echo", ReplyAction="http://tempuri.org/IMembership/EchoResponse")]
        System.Threading.Tasks.Task<string> EchoAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/ValidateCredentials", ReplyAction="http://tempuri.org/IMembership/ValidateCredentialsResponse")]
        bool ValidateCredentials(string adminUserName, string adminPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMembership/ValidateCredentials", ReplyAction="http://tempuri.org/IMembership/ValidateCredentialsResponse")]
        System.Threading.Tasks.Task<bool> ValidateCredentialsAsync(string adminUserName, string adminPassword);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string adminUserName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string adminPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string userId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string userPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string passwordQuestion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string passwordAnswer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public bool isApproved;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=8)]
        public object providerUserKey;
        
        public CreateUserRequest() {
        }
        
        public CreateUserRequest(string adminUserName, string adminPassword, string userId, string userPassword, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey) {
            this.adminUserName = adminUserName;
            this.adminPassword = adminPassword;
            this.userId = userId;
            this.userPassword = userPassword;
            this.email = email;
            this.passwordQuestion = passwordQuestion;
            this.passwordAnswer = passwordAnswer;
            this.isApproved = isApproved;
            this.providerUserKey = providerUserKey;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CreateUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public SecureAuthWebServiceDemoTests.MembershipService.MembershipUserModel CreateUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public SecureAuthWebServiceDemoTests.MembershipService.MembershipCreateStatus status;
        
        public CreateUserResponse() {
        }
        
        public CreateUserResponse(SecureAuthWebServiceDemoTests.MembershipService.MembershipUserModel CreateUserResult, SecureAuthWebServiceDemoTests.MembershipService.MembershipCreateStatus status) {
            this.CreateUserResult = CreateUserResult;
            this.status = status;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMembershipChannel : SecureAuthWebServiceDemoTests.MembershipService.IMembership, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MembershipClient : System.ServiceModel.ClientBase<SecureAuthWebServiceDemoTests.MembershipService.IMembership>, SecureAuthWebServiceDemoTests.MembershipService.IMembership {
        
        public MembershipClient() {
        }
        
        public MembershipClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MembershipClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MembershipClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MembershipClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SecureAuthWebServiceDemoTests.MembershipService.CreateUserResponse SecureAuthWebServiceDemoTests.MembershipService.IMembership.CreateUser(SecureAuthWebServiceDemoTests.MembershipService.CreateUserRequest request) {
            return base.Channel.CreateUser(request);
        }
        
        public SecureAuthWebServiceDemoTests.MembershipService.MembershipUserModel CreateUser(string adminUserName, string adminPassword, string userId, string userPassword, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out SecureAuthWebServiceDemoTests.MembershipService.MembershipCreateStatus status) {
            SecureAuthWebServiceDemoTests.MembershipService.CreateUserRequest inValue = new SecureAuthWebServiceDemoTests.MembershipService.CreateUserRequest();
            inValue.adminUserName = adminUserName;
            inValue.adminPassword = adminPassword;
            inValue.userId = userId;
            inValue.userPassword = userPassword;
            inValue.email = email;
            inValue.passwordQuestion = passwordQuestion;
            inValue.passwordAnswer = passwordAnswer;
            inValue.isApproved = isApproved;
            inValue.providerUserKey = providerUserKey;
            SecureAuthWebServiceDemoTests.MembershipService.CreateUserResponse retVal = ((SecureAuthWebServiceDemoTests.MembershipService.IMembership)(this)).CreateUser(inValue);
            status = retVal.status;
            return retVal.CreateUserResult;
        }
        
        public System.Threading.Tasks.Task<SecureAuthWebServiceDemoTests.MembershipService.CreateUserResponse> CreateUserAsync(SecureAuthWebServiceDemoTests.MembershipService.CreateUserRequest request) {
            return base.Channel.CreateUserAsync(request);
        }
        
        public SecureAuthWebServiceDemoTests.MembershipService.MembershipUserModel GetUser(string adminUserName, string adminPassword, string userId, bool isOnline) {
            return base.Channel.GetUser(adminUserName, adminPassword, userId, isOnline);
        }
        
        public System.Threading.Tasks.Task<SecureAuthWebServiceDemoTests.MembershipService.MembershipUserModel> GetUserAsync(string adminUserName, string adminPassword, string userId, bool isOnline) {
            return base.Channel.GetUserAsync(adminUserName, adminPassword, userId, isOnline);
        }
        
        public bool ValidateUser(string adminUserName, string adminPassword, string userId, string userPassword) {
            return base.Channel.ValidateUser(adminUserName, adminPassword, userId, userPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateUserAsync(string adminUserName, string adminPassword, string userId, string userPassword) {
            return base.Channel.ValidateUserAsync(adminUserName, adminPassword, userId, userPassword);
        }
        
        public bool ChangePassword(string adminUserName, string adminPassword, string userId, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(adminUserName, adminPassword, userId, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string adminUserName, string adminPassword, string userId, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(adminUserName, adminPassword, userId, oldPassword, newPassword);
        }
        
        public string ResetPassword(string adminUserName, string adminPassword, string userId, string answer) {
            return base.Channel.ResetPassword(adminUserName, adminPassword, userId, answer);
        }
        
        public System.Threading.Tasks.Task<string> ResetPasswordAsync(string adminUserName, string adminPassword, string userId, string answer) {
            return base.Channel.ResetPasswordAsync(adminUserName, adminPassword, userId, answer);
        }
        
        public string Echo(string data) {
            return base.Channel.Echo(data);
        }
        
        public System.Threading.Tasks.Task<string> EchoAsync(string data) {
            return base.Channel.EchoAsync(data);
        }
        
        public bool ValidateCredentials(string adminUserName, string adminPassword) {
            return base.Channel.ValidateCredentials(adminUserName, adminPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateCredentialsAsync(string adminUserName, string adminPassword) {
            return base.Channel.ValidateCredentialsAsync(adminUserName, adminPassword);
        }
    }
}
