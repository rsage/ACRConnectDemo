//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestSecureAuthSvc.SecureAuthProfileSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserProfileProperty", Namespace="http://schemas.datacontract.org/2004/07/SecureAuth.ServiceModel")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    public partial class UserProfileProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OATHProvisionProperty", Namespace="http://schemas.datacontract.org/2004/07/SecureAuth.ServiceModel")]
    [System.SerializableAttribute()]
    public partial class OATHProvisionProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://appliance.gosecureauth.com", ConfigurationName="SecureAuthProfileSvc.IProfile")]
    public interface IProfile {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/ReadProfile", ReplyAction="http://appliance.gosecureauth.com/IProfile/ReadProfileResponse")]
        TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[] ReadProfile(string adminUserName, string adminPassword, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/ReadProfile", ReplyAction="http://appliance.gosecureauth.com/IProfile/ReadProfileResponse")]
        System.Threading.Tasks.Task<TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[]> ReadProfileAsync(string adminUserName, string adminPassword, string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/SaveProfile", ReplyAction="http://appliance.gosecureauth.com/IProfile/SaveProfileResponse")]
        bool SaveProfile(string adminUserName, string adminPassword, string userId, TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[] userProfileProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/SaveProfile", ReplyAction="http://appliance.gosecureauth.com/IProfile/SaveProfileResponse")]
        System.Threading.Tasks.Task<bool> SaveProfileAsync(string adminUserName, string adminPassword, string userId, TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[] userProfileProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/ReadOATHProvisionData", ReplyAction="http://appliance.gosecureauth.com/IProfile/ReadOATHProvisionDataResponse")]
        TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[] ReadOATHProvisionData(string userKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/ReadOATHProvisionData", ReplyAction="http://appliance.gosecureauth.com/IProfile/ReadOATHProvisionDataResponse")]
        System.Threading.Tasks.Task<TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[]> ReadOATHProvisionDataAsync(string userKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/ReadOATHProvisionDataByUserName", ReplyAction="http://appliance.gosecureauth.com/IProfile/ReadOATHProvisionDataByUserNameRespons" +
            "e")]
        TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[] ReadOATHProvisionDataByUserName(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/ReadOATHProvisionDataByUserName", ReplyAction="http://appliance.gosecureauth.com/IProfile/ReadOATHProvisionDataByUserNameRespons" +
            "e")]
        System.Threading.Tasks.Task<TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[]> ReadOATHProvisionDataByUserNameAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/Echo", ReplyAction="http://appliance.gosecureauth.com/IProfile/EchoResponse")]
        string Echo(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/Echo", ReplyAction="http://appliance.gosecureauth.com/IProfile/EchoResponse")]
        System.Threading.Tasks.Task<string> EchoAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/ValidateCredentials", ReplyAction="http://appliance.gosecureauth.com/IProfile/ValidateCredentialsResponse")]
        bool ValidateCredentials(string adminUserName, string adminPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appliance.gosecureauth.com/IProfile/ValidateCredentials", ReplyAction="http://appliance.gosecureauth.com/IProfile/ValidateCredentialsResponse")]
        System.Threading.Tasks.Task<bool> ValidateCredentialsAsync(string adminUserName, string adminPassword);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProfileChannel : TestSecureAuthSvc.SecureAuthProfileSvc.IProfile, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProfileClient : System.ServiceModel.ClientBase<TestSecureAuthSvc.SecureAuthProfileSvc.IProfile>, TestSecureAuthSvc.SecureAuthProfileSvc.IProfile {
        
        public ProfileClient() {
        }
        
        public ProfileClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProfileClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProfileClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProfileClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[] ReadProfile(string adminUserName, string adminPassword, string userId) {
            return base.Channel.ReadProfile(adminUserName, adminPassword, userId);
        }
        
        public System.Threading.Tasks.Task<TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[]> ReadProfileAsync(string adminUserName, string adminPassword, string userId) {
            return base.Channel.ReadProfileAsync(adminUserName, adminPassword, userId);
        }
        
        public bool SaveProfile(string adminUserName, string adminPassword, string userId, TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[] userProfileProperties) {
            return base.Channel.SaveProfile(adminUserName, adminPassword, userId, userProfileProperties);
        }
        
        public System.Threading.Tasks.Task<bool> SaveProfileAsync(string adminUserName, string adminPassword, string userId, TestSecureAuthSvc.SecureAuthProfileSvc.UserProfileProperty[] userProfileProperties) {
            return base.Channel.SaveProfileAsync(adminUserName, adminPassword, userId, userProfileProperties);
        }
        
        public TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[] ReadOATHProvisionData(string userKey) {
            return base.Channel.ReadOATHProvisionData(userKey);
        }
        
        public System.Threading.Tasks.Task<TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[]> ReadOATHProvisionDataAsync(string userKey) {
            return base.Channel.ReadOATHProvisionDataAsync(userKey);
        }
        
        public TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[] ReadOATHProvisionDataByUserName(string userName, string password) {
            return base.Channel.ReadOATHProvisionDataByUserName(userName, password);
        }
        
        public System.Threading.Tasks.Task<TestSecureAuthSvc.SecureAuthProfileSvc.OATHProvisionProperty[]> ReadOATHProvisionDataByUserNameAsync(string userName, string password) {
            return base.Channel.ReadOATHProvisionDataByUserNameAsync(userName, password);
        }
        
        public string Echo(string data) {
            return base.Channel.Echo(data);
        }
        
        public System.Threading.Tasks.Task<string> EchoAsync(string data) {
            return base.Channel.EchoAsync(data);
        }
        
        public bool ValidateCredentials(string adminUserName, string adminPassword) {
            return base.Channel.ValidateCredentials(adminUserName, adminPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateCredentialsAsync(string adminUserName, string adminPassword) {
            return base.Channel.ValidateCredentialsAsync(adminUserName, adminPassword);
        }
    }
}
